{
  "DemoScript": {
    "dependencies": [
      "ModuleLoader",
      "GraphBuilder",
      "SurrogateRegistry",
      "StaticStubSurrogate",
      "MockLLMSurrogate",
      "WebServer",
      "FileWatcher",
      "WebUI"
    ],
    "description": "Comprehensive validation script demonstrating complete system workflow",
    "implementation": "demo.py",
    "inputs": [
      {
        "description": "Modules directory path for validation",
        "type": "str"
      }
    ],
    "name": "DemoScript",
    "outputs": [
      {
        "description": "Detailed report of all component functionality tests",
        "type": "ValidationReport"
      },
      {
        "description": "Overall system health status",
        "type": "bool"
      }
    ],
    "status": "implemented"
  },
  "FileWatcher": {
    "dependencies": [
      "ModuleLoader",
      "GraphBuilder"
    ],
    "description": "Monitors YAML module files for changes and triggers automatic regeneration",
    "implementation": "watcher.py",
    "inputs": [
      {
        "description": "Directory path to monitor for file changes",
        "type": "str"
      },
      {
        "description": "Debounce delay in seconds to prevent rapid regeneration",
        "type": "float"
      }
    ],
    "name": "FileWatcher",
    "outputs": [
      {
        "description": "File system events for create, modify, delete operations",
        "type": "FileEvent"
      },
      {
        "description": "Success status of diagram regeneration",
        "type": "bool"
      }
    ],
    "status": "implemented"
  },
  "GraphBuilder": {
    "dependencies": [
      "ModuleLoader"
    ],
    "description": "Converts module definitions to Mermaid.js diagram format with interactive visualization",
    "implementation": "graph_builder.py",
    "inputs": [
      {
        "description": "Validated module objects from ModuleLoader",
        "type": "List[ModuleNode]"
      },
      {
        "description": "Output directory for generated diagram files",
        "type": "Path"
      }
    ],
    "name": "GraphBuilder",
    "outputs": [
      {
        "description": "Generated Mermaid diagram syntax with styling",
        "type": "str"
      },
      {
        "description": "JSON metadata for web interface consumption",
        "type": "dict"
      }
    ],
    "status": "implemented"
  },
  "MockLLMSurrogate": {
    "dependencies": [
      "SurrogateRegistry"
    ],
    "description": "Mock LLM surrogate that simulates AI-based execution with prompt logging",
    "implementation": "surrogate.py:MockLLMSurrogate",
    "inputs": [
      {
        "description": "Input data for LLM prompt generation",
        "type": "dict"
      },
      {
        "description": "Prompt template for mock LLM execution",
        "type": "str"
      }
    ],
    "name": "MockLLMSurrogate",
    "outputs": [
      {
        "description": "Mock LLM response with tokens and execution metadata",
        "type": "dict"
      },
      {
        "description": "Log file path for prompt tracking",
        "type": "str"
      }
    ],
    "status": "implemented"
  },
  "ModuleLoader": {
    "dependencies": [],
    "description": "Loads and validates YAML module definitions using Pydantic schemas",
    "implementation": "loader.py",
    "inputs": [
      {
        "description": "Path to modules directory containing YAML files",
        "type": "str"
      },
      {
        "description": "Optional flag to validate dependencies between modules",
        "type": "bool"
      }
    ],
    "name": "ModuleLoader",
    "outputs": [
      {
        "description": "List of validated module objects with schemas",
        "type": "List[ModuleNode]"
      },
      {
        "description": "Detailed error information for invalid modules",
        "type": "ValidationError"
      }
    ],
    "status": "implemented"
  },
  "StaticStubSurrogate": {
    "dependencies": [
      "SurrogateRegistry"
    ],
    "description": "Basic surrogate implementation that returns static placeholder data for testing",
    "implementation": "surrogate.py:StaticStubSurrogate",
    "inputs": [
      {
        "description": "Input data from module execution request",
        "type": "dict"
      }
    ],
    "name": "StaticStubSurrogate",
    "outputs": [
      {
        "description": "Static response with timestamp and input echo",
        "type": "dict"
      }
    ],
    "status": "implemented"
  },
  "SurrogateRegistry": {
    "dependencies": [],
    "description": "Registry system for managing and executing module surrogate implementations",
    "implementation": "surrogate.py:SurrogateRegistry",
    "inputs": [
      {
        "description": "Surrogate type name for lookup",
        "type": "str"
      },
      {
        "description": "Input data for surrogate execution",
        "type": "dict"
      }
    ],
    "name": "SurrogateRegistry",
    "outputs": [
      {
        "description": "Instantiated surrogate implementation",
        "type": "Surrogate"
      },
      {
        "description": "Execution results from surrogate run",
        "type": "dict"
      }
    ],
    "status": "implemented"
  },
  "WebServer": {
    "dependencies": [
      "ModuleLoader",
      "GraphBuilder",
      "SurrogateRegistry"
    ],
    "description": "Flask backend providing REST API for module data and surrogate execution",
    "implementation": "app.py",
    "inputs": [
      {
        "description": "HTTP requests from web interface",
        "type": "HTTPRequest"
      },
      {
        "description": "Module name for surrogate execution",
        "type": "str"
      }
    ],
    "name": "WebServer",
    "outputs": [
      {
        "description": "API responses with module data or execution results",
        "type": "JSONResponse"
      },
      {
        "description": "Main web interface served to browser",
        "type": "HTMLResponse"
      }
    ],
    "status": "implemented"
  },
  "WebUI": {
    "dependencies": [
      "WebServer"
    ],
    "description": "Interactive frontend providing diagram visualization and module interaction",
    "implementation": "index.html",
    "inputs": [
      {
        "description": "Module data and diagram information from WebServer",
        "type": "JSONData"
      },
      {
        "description": "User interactions like clicks, zoom, pan operations",
        "type": "UserEvent"
      }
    ],
    "name": "WebUI",
    "outputs": [
      {
        "description": "Rendered interactive diagram with click handlers",
        "type": "MermaidDiagram"
      },
      {
        "description": "Side panel displaying module details and controls",
        "type": "HTMLPanel"
      }
    ],
    "status": "implemented"
  }
}
