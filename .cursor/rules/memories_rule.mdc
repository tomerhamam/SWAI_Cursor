# Agent Memory Rule - ALWAYS FOLLOW

## MANDATORY: Check Project Memories First

**RULE**: On EVERY new user interaction, the agent MUST:

1. **Read `docs/memories.md`** before taking any action
2. **Check for relevant past issues** that match the current request
3. **Apply documented solutions** instead of rediscovering problems
4. **Update memories** when new issues or solutions are found

## When to Check Memories

‚úÖ **ALWAYS check before:**
- Starting servers (Flask, npm, etc.)
- Troubleshooting common errors
- Setting up development environment
- Running tests or deployments
- Making configuration changes

‚úÖ **ESPECIALLY check for:**
- Server startup procedures
- Port configurations
- Virtual environment locations
- Common error patterns
- Project structure assumptions

## Agent Behavior Requirements

### DO:
- Read memories.md at start of interaction
- Reference documented solutions
- Follow "CORRECT Solution" sections precisely
- Avoid "Never Try Again" approaches
- Update memories when learning new information

### DON'T:
- Ignore documented solutions
- Repeat failed approaches from memories
- Assume standard configurations without checking
- Waste time rediscovering known issues

## Memory Update Protocol

When encountering new issues or solutions:
1. Document the problem clearly
2. Include error messages and symptoms
3. Provide step-by-step resolution
4. Mark old approaches to avoid
5. Add date and status information

## Example Usage

```
User: "Start the backend server"
Agent: 
1. ‚úÖ Check docs/memories.md first
2. ‚úÖ Find "Server Startup Issues - RESOLVED"
3. ‚úÖ Use documented solution: python -m flask --app app.py run --debug
4. ‚úÖ Avoid backend/ directory approach (marked as "Never Try Again")
```

---

**This rule applies globally to ALL agent interactions with this project.**
**Ignoring documented memories wastes time and frustrates users.**
**When in doubt, check memories.md first.** 

## üéØ Milestone 3: Complete Interactive Frontend Implementation

This PR completes Milestone 3 by implementing a fully functional Vue 3 + vis.js frontend with comprehensive testing and development infrastructure.

### ‚úÖ **Major Features Implemented**

**üé® Frontend Architecture:**
- Vue 3 + TypeScript + vis.js network visualization
- Interactive graph with hierarchical layout
- Real-time module management and dependency visualization
- Modern responsive UI with proper accessibility

**üîß Backend Enhancements:**
- Enhanced Flask API with module CRUD operations
- Module creation, updating, and deletion endpoints
- Improved error handling and validation
- Surrogate system integration

**üß™ Testing Infrastructure:**
- Complete test suite: Backend (83 passed), Frontend (8 passed), E2E (6 passed)
- Playwright E2E testing across Chrome, Firefox, Safari
- Fixed test configurations and import paths
- Added comprehensive test coverage reporting

**‚ö° Development Experience:**
- Automated server startup scripts (`start_servers.sh`)
- Port conflict resolution (`kill_ports.sh`)
- Comprehensive debugging and error reporting
- Development workflow documentation

### üõ†Ô∏è **Technical Improvements**

**Graph Rendering:**
- Fixed vis.js initialization timing and container sizing
- Added comprehensive debugging infrastructure
- Improved CSS styling for proper canvas display
- Enhanced error handling and logging

**API Integration:**
- Complete frontend-backend integration
- Real-time module data synchronization
- Drag & drop module creation from palette
- Context menus and interactive controls

### üìä **Test Results**
- **Total Tests**: 110 tests passing, 3 skipped, 0 failed
- **Backend**: 83 passed, 2 skipped (Python/pytest)
- **Frontend Unit**: 2 passed (TypeScript/vitest)  
- **Frontend E2E**: 6 passed (Playwright across 3 browsers)
- **Integration**: 19 passed, 1 skipped

### üöÄ **Ready for Production**
- All tests passing with comprehensive coverage
- Robust error handling and user feedback
- Clean, maintainable codebase
- Complete development workflow automation

**Demo URLs:**
- Frontend: http://localhost:3001
- Backend: http://localhost:5000
- API: http://localhost:5000/api/modules 

**This rule applies globally to ALL agent interactions with this project.**
**Ignoring documented memories wastes time and frustrates users.**
**When in doubt, check memories.md first.** 